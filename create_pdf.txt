    c = canvas.Canvas(output_file, pagesize=letter)
    width, height = letter
    margin = 50  # Define margins
    text_width = width - 2 * margin  # Available width for text
    current_y = height - margin  # Starting y-position

    # Function to wrap text within the available width while respecting the bounding box
    def wrap_text(text, bbox, font_size):
        c.setFont("Helvetica", font_size)
        wrapped_lines = []
        words = text.split(' ')
        line = ""

        for word in words:
            test_line = line + word + " "
            # Check if the current line fits within the available space
            if c.stringWidth(test_line, "Helvetica", font_size) <= (bbox['Width'] * width):
                line = test_line
            else:
                wrapped_lines.append(line)
                line = word + " "

        if line:
            wrapped_lines.append(line)

        return wrapped_lines

    # Process each block of text
    for block in mapped_text_blocks:
        text = block['text']
        bbox = block['bbox']  # Bounding box data
        font_size = 10  # You can adjust font size as needed
        
        # Wrap the text for each block based on its bbox (bounding box)
        wrapped_lines = wrap_text(text, bbox, font_size)

        # Calculate initial x, y based on bbox and the remaining space for wrapping
        x, y, w, h = (bbox['Left'] * width, height - (bbox['Top'] * height), bbox['Width'] * width, bbox['Height'] * height)

        # Draw each wrapped line of text within the given bounding box area
        for wrapped_line in wrapped_lines:
            if current_y < margin:  # If the y-position is below margin, start a new page
                c.showPage()
                current_y = height - margin

            # Adjust line spacing and position according to the bounding box
            c.drawString(x, current_y, wrapped_line)
            current_y -= font_size + 5  # Adjust line spacing

    # Handle tables (if any) similarly, but this code focuses on text blocks
    # Add logic to handle tables if needed

    c.save()