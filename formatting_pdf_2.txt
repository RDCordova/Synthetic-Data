from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Function to lay out content with formatting and bounding box information
def create_pdf_with_bounding_boxes(mapped_text_blocks, output_file):
    c = canvas.Canvas(output_file, pagesize=letter)
    width, height = letter
    margin = 50  # Define page margins
    current_y = height - margin  # Start at the top of the page

    # Set standard font sizes and line spacing
    body_font_size = 10
    header_font_size = 14
    line_height = body_font_size + 4  # Spacing between lines

    # Iterate over each block of text
    for i, block in enumerate(mapped_text_blocks):
        text = block['text']  # Extract the text content from the block
        bbox = block['bbox']  # Extract bounding box information
        
        # Get bounding box positions relative to the page
        x = bbox['Left'] * width
        y = height - (bbox['Top'] * height)
        bbox_width = bbox['Width'] * width  # Width of the bounding box
        bbox_height = bbox['Height'] * height  # Height of the bounding box

        # Check if there is enough space for the block, else add a new page
        if current_y - bbox_height < margin:
            c.showPage()
            current_y = height - margin

        # Formatting: Apply larger font size for the first block (header)
        if i == 0:
            c.setFont("Helvetica-Bold", header_font_size)  # Header style
            c.drawString(x, y, text)  # Draw the header text at bbox position
            current_y = y - header_font_size - 10  # Adjust y-position after header
        else:
            # Regular body text
            c.setFont("Helvetica", body_font_size)
            words = text.split(' ')  # Split text into words for wrapping
            line = ''  # Current line of text
            
            # Wrap text within the bounding box width
            for word in words:
                test_line = line + word + ' '
                if c.stringWidth(test_line, "Helvetica", body_font_size) <= bbox_width:
                    line = test_line  # Add word to the current line if it fits
                else:
                    # Draw the current line within the bounding box
                    c.drawString(x, current_y, line)
                    current_y -= line_height  # Move down for the next line

                    # Check if the current line fits within the bbox height
                    if current_y - line_height < margin or current_y - bbox_height < margin:
                        c.showPage()
                        current_y = height - margin
                        c.setFont("Helvetica", body_font_size)

                    line = word + ' '  # Start a new line with the current word

            # Draw the last line in the block
            if line:
                c.drawString(x, current_y, line)
                current_y -= line_height

                # Check if the block fits within the remaining bbox height
                if current_y - line_height < margin or current_y - bbox_height < margin:
                    c.showPage()
                    current_y = height - margin
                    c.setFont("Helvetica", body_font_size)

        # Add extra space between paragraphs
        current_y -= 10

    # Save the final PDF
    c.save()

# Example usage with bounding box information
mapped_text_blocks = [
    {'text': 'Bounding Box Example PDF', 'bbox': {'Left': 0.1, 'Top': 0.9, 'Width': 0.8, 'Height': 0.05}},  # Header
    {'text': 'This is the first block of text, positioned within a bounding box. It demonstrates how to use bounding box coordinates to position text accurately on the page.', 'bbox': {'Left': 0.1, 'Top': 0.8, 'Width': 0.8, 'Height': 0.2}},
    {'text': 'This is the second block of text. Each block is independently positioned using its bounding box, and text wrapping happens within the width of the bounding box.', 'bbox': {'Left': 0.1, 'Top': 0.6, 'Width': 0.8, 'Height': 0.2}},
]

# Generate the PDF with bounding box positioning
create_pdf_with_bounding_boxes(mapped_text_blocks, 'output_bounding_box.pdf')
