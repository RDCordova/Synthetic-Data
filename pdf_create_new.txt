
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Function to handle wrapping text and respecting the original PDF formatting
def create_pdf_with_mapped_content_and_wrapping(mapped_text_blocks, tables, output_file):
    c = canvas.Canvas(output_file, pagesize=letter)
    width, height = letter
    margin = 50  # Define margins for content

    # Function to wrap text within the available width based on the bounding box
    def wrap_text(text, bbox_width, font_size):
        c.setFont("Helvetica", font_size)
        wrapped_lines = []
        words = text.split(' ')
        line = ""

        for word in words:
            test_line = line + word + " "
            # Check if the current line fits within the available width
            if c.stringWidth(test_line, "Helvetica", font_size) <= bbox_width:
                line = test_line
            else:
                wrapped_lines.append(line)
                line = word + " "

        if line:
            wrapped_lines.append(line)

        return wrapped_lines

    # Process each block of text
    for block in mapped_text_blocks:
        text = block['text']
        bbox = block['bbox']  # Bounding box coordinates for this block of text
        font_size = 10  # Font size can be adjusted based on requirements

        # Scale bbox coordinates to match PDF dimensions
        x = bbox['Left'] * width
        y = height - (bbox['Top'] * height)
        bbox_width = bbox['Width'] * width
        bbox_height = bbox['Height'] * height

        # Wrap the text within the bounding box width
        wrapped_lines = wrap_text(text, bbox_width, font_size)

        # Calculate total height needed for all wrapped lines
        line_height = font_size + 4  # Extra spacing between lines to prevent overlap
        total_text_height = len(wrapped_lines) * line_height

        # Handle the case where the wrapped text exceeds the available page height
        current_y = y
        for wrapped_line in wrapped_lines:
            # Check if the current line fits within the remaining page height
            if current_y - line_height < margin:  # No space left, go to next page
                c.showPage()
                current_y = height - margin

            # Draw the text
            c.setFont("Helvetica", font_size)
            c.drawString(x, current_y, wrapped_line)
            current_y -= line_height

        # Ensure no overlapping by handling remaining text properly
        remaining_space_in_bbox = current_y - (height - bbox_height)
        if remaining_space_in_bbox < line_height:
            c.showPage()
            current_y = height - margin

    c.save()



#F